{-# LANGUAGE ApplicativeDo #-}

module User where

import Daml.Script

-- MAIN_TEMPLATE_BEGIN
template User with
    username: Party
    following: [Party]
  where
    signatory username
    observer following
-- MAIN_TEMPLATE_END

    key username: Party
    maintainer key

    -- FOLLOW_BEGIN
    nonconsuming choice Follow: ContractId User with
        userToFollow: Party
      controller username
      do
        assertMsg "You cannot follow yourself" (userToFollow /= username)
        assertMsg "You cannot follow the same user twice" (notElem userToFollow following)
        archive self -- and there it is. Why not just have a consuming choice?
                     -- maybe because by the time we've done the checks, it's too late?
                     -- what about a postconsuming contract?
        create this with following = userToFollow :: following
    -- FOLLOW_END

user_test = script do
  alice <- allocateParty "Alice"
  bob <- allocateParty "Bob"
  aliceUser <- submit alice do
    createCmd User with username = alice, following = []
  bobUser <- submit bob do
    createCmd User with username = bob, following = []
  
  -- can't follow self
  submitMustFail alice $ exerciseCmd aliceUser Follow with userToFollow = alice

  newAliceUser <- submit alice $ exerciseCmd aliceUser Follow with userToFollow = bob

  -- already following
  submitMustFail alice $ exerciseCmd newAliceUser Follow with userToFollow = bob

